{
  "status": "ok",
  "feed": {
    "url": "https://medium.com/feed/@sabin-baniya",
    "title": "Stories by sabin baniya on Medium",
    "link": "https://medium.com/@sabin-baniya?source=rss-26a5c19145b4------2",
    "author": "",
    "description": "Stories by sabin baniya on Medium",
    "image": "https://cdn-images-1.medium.com/fit/c/150/150/0*m0PPZn7VvPypwVSS"
  },
  "items": [
    {
      "title": "Building Pinterest\u2019s Home Feed layout with Next.JS &amp; Tailwind CSS, but the Easy Way",
      "pubDate": "2022-11-28 14:36:47",
      "link": "https://sabin-baniya.medium.com/building-pinterests-home-feed-layout-with-next-js-tailwind-css-but-the-easy-way-ad72116b8d0c?source=rss-26a5c19145b4------2",
      "guid": "https://medium.com/p/ad72116b8d0c",
      "author": "sabin baniya",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*UYRDOXS3l03DE9ZdfpClNg.jpeg",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UYRDOXS3l03DE9ZdfpClNg.jpeg\"></figure><p>Hey guys, Today we are going to be making Pinterest\u2019s masonry grid layout of their home feed. We will be using Next.JS &amp; tailwind CSS with Unsplash API for this\u00a0project.</p>\n<p>First, let\u2019s have a look at what we\u2019re going to be building.</p>\n<p>Here\u2019s what the home feed of Pinterest looks\u00a0like</p>\n<figure><img alt=\"Create Pinterest\u2019s home feed with Tailwind CSS\" src=\"https://cdn-images-1.medium.com/max/1024/1*pOOKanWHWpRRLZFSj5quRw.png\"></figure><p>Upon inspecting with Chrome Devtools, We can see that they have implemented the layout using translate and absolute position, etc. for their\u00a0layout.</p>\n<figure><img alt=\"Pinterest\u2019s Masonry layout under the hood\" src=\"https://cdn-images-1.medium.com/max/1024/1*xvMidhLk0Lpy7yUMpYoB_w.png\"></figure><p>But we are going to be implementing the same layout in a much simpler way, using Columns. Columns is a CSS shorthand for column count &amp; column width property. I first saw this in the tailwind docs as a class and later realized that it\u2019s a CSS property. So, what this property does is it helps in dividing an element into columns that you specify. Kinda like the columns in a newspaper article.</p>\n<p>You can check out the tailwind docs for columns\u00a0<a href=\"https://tailwindcss.com/docs/columns\">here</a>.</p>\n<p>Let\u2019s go ahead and get access to Unsplash API. Go to <a href=\"https://unsplash.com/developers\">Unsplash developer</a>s, register your application &amp; you will be able to get access &amp; secret key for that\u00a0project.</p>\n<p>Now let\u2019s use create-next-app to create a next.js application for\u00a0us.</p>\n<pre>npx create-next-app pinterest-layout</pre>\n<p>Let\u2019s install our dependencies for this project. First, Tailwind\u00a0CSS.</p>\n<pre>npm install -D tailwindcss postcss autoprefixer<br>npx tailwindcss init -p</pre>\n<p>After running the two commands, your root directory shall now have a tailwind.config.js file.</p>\n<p>In that file remove all existing code &amp; add the following snippet:</p>\n<pre>/** @type {import('tailwindcss').Config} */<br>module.exports = {<br>  content: [<br>    \"./pages/**/*.{js,ts,jsx,tsx}\",<br>    \"./components/**/*.{js,ts,jsx,tsx}\",<br>  ],<br>  theme: {<br>    extend: {},<br>  },<br>  plugins: [],<br>};</pre>\n<p>Now under /styles/globals.css. Remove all existing code &amp; add the following snippet:</p>\n<pre>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;</pre>\n<p>Now, Let's go to /pages/index.js now. We will remove all the existing code and add the following snippet:</p>\n<pre>import Head from \"next/head\"<br>const Home = () =&gt; {<br>  return &lt;&gt;<br>    &lt;Head&gt;<br>        &lt;title&gt;Pinterest&lt;/title&gt;<br>    &lt;/Head&gt;<br>  &lt;/&gt;;<br>};<br><br>export default Home;</pre>\n<p>Now with this much done, we can start to set up our Unsplash API, and first create a\u00a0.env.local file in your root directory.</p>\n<p>Add in your access key provided in the Unsplash developer portal.</p>\n<p>Now let's install the Unsplash\u00a0library</p>\n<pre>npm i unsplash-js</pre>\n<p>After that let's initialize the instance to make a request to Unsplash API as said in their\u00a0<a href=\"https://github.com/unsplash/unsplash-js#creating-an-instance\">docs</a>.</p>\n<p>We will be using getServerSideProps to make a request from our server to the unsplash server &amp; we will return the response as props to the\u00a0page.</p>\n<pre>import { createApi } from \"unsplash-js\";<br><br>export const getServerSideProps = async () =&gt; {<br>  const serverApi = createApi({<br>    accessKey: process.env.ACCESS_KEY,<br>  });<br><br>  const photos = await serverApi.photos.list({perPage: 30});<br>  return {<br>    props: {<br>      photos: photos.response.results,<br>    },<br>  };<br>};</pre>\n<p>Now if everything goes well here, then we will get photos props on our page and we will be able to access them via\u00a0props.</p>\n<p>Now let\u2019s map over the photos\u00a0prop.</p>\n<pre>const Home = ({ photos }) =&gt; {<br>  return (<br>    &lt;&gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;Pinterest&lt;/title&gt;<br>      &lt;/Head&gt;<br>      &lt;section&gt;<br>             {photos.map((el) =&gt; (<br>                &lt;div key={el.id}&gt;<br>                  &lt;img<br>                    src={el.urls.regular}<br>                    alt={el.description}<br>                    height={300}<br>                    width={200}<br>                  /&gt;<br>                &lt;/div&gt;<br>              ))}     <br>      &lt;/section&gt;<br>    &lt;/&gt;<br>  );<br>};</pre>\n<p>Now after we map the images they should lay normally like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bumvI4AhEF3eo9fzBYaFPQ.png\"></figure><p>And after we add the class of columns to the containing section of whole images, we will use a 7-column layout for this one, and after changing the code\u00a0to</p>\n<pre>&lt;section className='columns-7 max-w-7xl mx-auto space-y-4'&gt;<br>        {photos.map((el) =&gt; (<br>          &lt;div key={el.id} className='rounded-md overflow-hidden'&gt;<br>            &lt;img<br>              src={el.urls.regular}<br>              alt={el.description}<br>              height={300}<br>              width={200}<br>            /&gt;<br>          &lt;/div&gt;<br>        ))}<br>&lt;/section&gt;</pre>\n<p>We will see the layout work like magic with no extra work, we get a beautiful layout</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JbbJq7gpEYkBhcODKqxjdA.png\"></figure><p>All right that\u2019s it, that is how we can achieve Pinterest like layout in a simple way using CSS columns, in next.js with Tailwindcss.</p>\n<p>If you read all the way, thanks for reading the whole\u00a0blog.</p>\n<p>Any comments would be much appreciated.</p>\n<p><em>About Me: My name is Sabin. I\u2019m a full-stack web developer and designer based in Pokhara, Nepal. I\u2019m new to writing blogs and will continue to write hopefully \ud83e\udd1e. I focus primarily on the frontend with Next.js &amp;\u00a0React.js</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ad72116b8d0c\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UYRDOXS3l03DE9ZdfpClNg.jpeg\"></figure><p>Hey guys, Today we are going to be making Pinterest\u2019s masonry grid layout of their home feed. We will be using Next.JS &amp; tailwind CSS with Unsplash API for this\u00a0project.</p>\n<p>First, let\u2019s have a look at what we\u2019re going to be building.</p>\n<p>Here\u2019s what the home feed of Pinterest looks\u00a0like</p>\n<figure><img alt=\"Create Pinterest\u2019s home feed with Tailwind CSS\" src=\"https://cdn-images-1.medium.com/max/1024/1*pOOKanWHWpRRLZFSj5quRw.png\"></figure><p>Upon inspecting with Chrome Devtools, We can see that they have implemented the layout using translate and absolute position, etc. for their\u00a0layout.</p>\n<figure><img alt=\"Pinterest\u2019s Masonry layout under the hood\" src=\"https://cdn-images-1.medium.com/max/1024/1*xvMidhLk0Lpy7yUMpYoB_w.png\"></figure><p>But we are going to be implementing the same layout in a much simpler way, using Columns. Columns is a CSS shorthand for column count &amp; column width property. I first saw this in the tailwind docs as a class and later realized that it\u2019s a CSS property. So, what this property does is it helps in dividing an element into columns that you specify. Kinda like the columns in a newspaper article.</p>\n<p>You can check out the tailwind docs for columns\u00a0<a href=\"https://tailwindcss.com/docs/columns\">here</a>.</p>\n<p>Let\u2019s go ahead and get access to Unsplash API. Go to <a href=\"https://unsplash.com/developers\">Unsplash developer</a>s, register your application &amp; you will be able to get access &amp; secret key for that\u00a0project.</p>\n<p>Now let\u2019s use create-next-app to create a next.js application for\u00a0us.</p>\n<pre>npx create-next-app pinterest-layout</pre>\n<p>Let\u2019s install our dependencies for this project. First, Tailwind\u00a0CSS.</p>\n<pre>npm install -D tailwindcss postcss autoprefixer<br>npx tailwindcss init -p</pre>\n<p>After running the two commands, your root directory shall now have a tailwind.config.js file.</p>\n<p>In that file remove all existing code &amp; add the following snippet:</p>\n<pre>/** @type {import('tailwindcss').Config} */<br>module.exports = {<br>  content: [<br>    \"./pages/**/*.{js,ts,jsx,tsx}\",<br>    \"./components/**/*.{js,ts,jsx,tsx}\",<br>  ],<br>  theme: {<br>    extend: {},<br>  },<br>  plugins: [],<br>};</pre>\n<p>Now under /styles/globals.css. Remove all existing code &amp; add the following snippet:</p>\n<pre>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;</pre>\n<p>Now, Let's go to /pages/index.js now. We will remove all the existing code and add the following snippet:</p>\n<pre>import Head from \"next/head\"<br>const Home = () =&gt; {<br>  return &lt;&gt;<br>    &lt;Head&gt;<br>        &lt;title&gt;Pinterest&lt;/title&gt;<br>    &lt;/Head&gt;<br>  &lt;/&gt;;<br>};<br><br>export default Home;</pre>\n<p>Now with this much done, we can start to set up our Unsplash API, and first create a\u00a0.env.local file in your root directory.</p>\n<p>Add in your access key provided in the Unsplash developer portal.</p>\n<p>Now let's install the Unsplash\u00a0library</p>\n<pre>npm i unsplash-js</pre>\n<p>After that let's initialize the instance to make a request to Unsplash API as said in their\u00a0<a href=\"https://github.com/unsplash/unsplash-js#creating-an-instance\">docs</a>.</p>\n<p>We will be using getServerSideProps to make a request from our server to the unsplash server &amp; we will return the response as props to the\u00a0page.</p>\n<pre>import { createApi } from \"unsplash-js\";<br><br>export const getServerSideProps = async () =&gt; {<br>  const serverApi = createApi({<br>    accessKey: process.env.ACCESS_KEY,<br>  });<br><br>  const photos = await serverApi.photos.list({perPage: 30});<br>  return {<br>    props: {<br>      photos: photos.response.results,<br>    },<br>  };<br>};</pre>\n<p>Now if everything goes well here, then we will get photos props on our page and we will be able to access them via\u00a0props.</p>\n<p>Now let\u2019s map over the photos\u00a0prop.</p>\n<pre>const Home = ({ photos }) =&gt; {<br>  return (<br>    &lt;&gt;<br>      &lt;Head&gt;<br>        &lt;title&gt;Pinterest&lt;/title&gt;<br>      &lt;/Head&gt;<br>      &lt;section&gt;<br>             {photos.map((el) =&gt; (<br>                &lt;div key={el.id}&gt;<br>                  &lt;img<br>                    src={el.urls.regular}<br>                    alt={el.description}<br>                    height={300}<br>                    width={200}<br>                  /&gt;<br>                &lt;/div&gt;<br>              ))}     <br>      &lt;/section&gt;<br>    &lt;/&gt;<br>  );<br>};</pre>\n<p>Now after we map the images they should lay normally like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bumvI4AhEF3eo9fzBYaFPQ.png\"></figure><p>And after we add the class of columns to the containing section of whole images, we will use a 7-column layout for this one, and after changing the code\u00a0to</p>\n<pre>&lt;section className='columns-7 max-w-7xl mx-auto space-y-4'&gt;<br>        {photos.map((el) =&gt; (<br>          &lt;div key={el.id} className='rounded-md overflow-hidden'&gt;<br>            &lt;img<br>              src={el.urls.regular}<br>              alt={el.description}<br>              height={300}<br>              width={200}<br>            /&gt;<br>          &lt;/div&gt;<br>        ))}<br>&lt;/section&gt;</pre>\n<p>We will see the layout work like magic with no extra work, we get a beautiful layout</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JbbJq7gpEYkBhcODKqxjdA.png\"></figure><p>All right that\u2019s it, that is how we can achieve Pinterest like layout in a simple way using CSS columns, in next.js with Tailwindcss.</p>\n<p>If you read all the way, thanks for reading the whole\u00a0blog.</p>\n<p>Any comments would be much appreciated.</p>\n<p><em>About Me: My name is Sabin. I\u2019m a full-stack web developer and designer based in Pokhara, Nepal. I\u2019m new to writing blogs and will continue to write hopefully \ud83e\udd1e. I focus primarily on the frontend with Next.js &amp;\u00a0React.js</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ad72116b8d0c\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": ["javascript", "tailwind-css", "nextjs"]
    }
  ]
}
